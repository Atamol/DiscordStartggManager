name: Notify Discord (repo activity)

on:
  push:
  pull_request:
    types: [opened, reopened, closed, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted, edited, dismissed]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, unassigned]
  issue_comment:
    types: [created]
  release:
    types: [published, created, prereleased, released, edited]
  discussion:
    types: [created, answered, locked, unlocked]
  discussion_comment:
    types: [created]
  create: # branch/tag created
  delete: # branch/tag deleted
  fork:
  watch:  # starred (type: started)

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      EVNAME: ${{ github.event_name }}
      REPO: ${{ github.repository }}
      ACTOR: ${{ github.actor }}
      REF: ${{ github.ref }}
      REFNAME: ${{ github.ref_name }}
      EVENT: ${{ toJson(github.event) }}
      SHA: ${{ github.sha }}
      URL_REPO: https://github.com/${{ github.repository }}
    steps:
      - name: "Guard: webhook secret must exist"
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "Missing secrets.DISCORD_WEBHOOK"; exit 1
          fi

      - name: Build message
        id: build
        run: |
          set -euo pipefail

          TITLE=""
          DESCRIPTION=""
          URL=""
          COLOR=""
          FIELDS_JSON='[]'

          case "$EVNAME" in
            push)
              COMMIT_COUNT=$(echo "$EVENT" | jq '.commits | length')
              COMPARE_URL=$(echo "$EVENT" | jq -r '.compare')
              
              TITLE="[${REPO}] ${COMMIT_COUNT} new commits to ${REFNAME}"
              URL=$COMPARE_URL
              DESCRIPTION=$(echo "$EVENT" | jq -r '.commits[]? | "- [`\(.id[0:7])`](\(.url)) \(.message|gsub("\r?\n";" "))"')
              [ -z "$DESCRIPTION" ] && DESCRIPTION="No new commits."
              COLOR=2829617
              ;;
                                
            pull_request)
              ACTION=$(echo "$EVENT" | jq -r '.action')
              PRNUM=$(echo "$EVENT" | jq -r '.number')
              PRTITLE=$(echo "$EVENT" | jq -r '.pull_request.title')
              PRURL=$(echo "$EVENT" | jq -r '.pull_request.html_url')
              PRBODY=$(echo "$EVENT" | jq -r '.pull_request.body')
              MERGED=$(echo "$EVENT" | jq -r '.pull_request.merged')

              TITLE="[${REPO}] Pull Request #${PRNUM} ${ACTION}: ${PRTITLE}"
              URL=$PRURL
              DESCRIPTION=$PRBODY
              COLOR=15105570 # orange
              if [ "$ACTION" = "closed" ] && [ "$MERGED" = "true" ]; then
                TITLE="[${REPO}] Pull Request #${PRNUM} merged: ${PRTITLE}"
                COLOR=5763719 # blurple
              elif [ "$ACTION" = "closed" ]; then
                COLOR=15158332 # red
              fi
              ;;

            issues)
              ACTION=$(echo "$EVENT" | jq -r '.action')
              NUM=$(echo "$EVENT" | jq -r '.issue.number')
              TITLE_ISS=$(echo "$EVENT" | jq -r '.issue.title')
              IURL=$(echo "$EVENT" | jq -r '.issue.html_url')
              IBODY=$(echo "$EVENT" | jq -r '.issue.body')

              TITLE="[${REPO}] Issue #${NUM} ${ACTION}: ${TITLE_ISS}"
              URL=$IURL
              DESCRIPTION=$IBODY
              COLOR=15844367 # gold
              ;;

            release)
              ACTION=$(echo "$EVENT" | jq -r '.action')
              TAG=$(echo "$EVENT" | jq -r '.release.tag_name')
              NAME=$(echo "$EVENT" | jq -r '.release.name')
              RURL=$(echo "$EVENT" | jq -r '.release.html_url')
              RBODY=$(echo "$EVENT" | jq -r '.release.body')

              TITLE="[${REPO}] Release ${TAG} ${ACTION}"
              URL=$RURL
              DESCRIPTION=$RBODY
              COLOR=3447003 # blue
              ;;
            
            pull_request_review)
              ACTION=$(echo "$EVENT" | jq -r '.action')
              PRNUM=$(echo "$EVENT" | jq -r '.pull_request.number')
              PRTITLE=$(echo "$EVENT" | jq -r '.pull_request.title')
              RURL=$(echo "$EVENT" | jq -r '.review.html_url')
              RBODY=$(echo "$EVENT" | jq -r '.review.body')
              
              TITLE="[${REPO}] Review ${ACTION} on PR #${PRNUM}: ${PRTITLE}"
              URL=$RURL
              DESCRIPTION=$RBODY
              COLOR=10181046
              ;;

            issue_comment | pull_request_review_comment | discussion_comment)
              BODY=$(echo "$EVENT" | jq -r '.comment.body')
              CURL=$(echo "$EVENT" | jq -r '.comment.html_url')
              CONTEXT_TITLE=""
              if [ "$EVNAME" = "issue_comment" ]; then
                CONTEXT_TITLE="on Issue #${NUM}"
              elif [ "$EVNAME" = "pull_request_review_comment" ]; then
                CONTEXT_TITLE="on PR #${PRNUM}"
              else
                CONTEXT_TITLE="on Discussion"
              fi
              
              TITLE="[${REPO}] New comment ${CONTEXT_TITLE}"
              URL=$CURL
              DESCRIPTION=$BODY
              COLOR=10181046 # purple
              ;;

            create | delete | fork | watch)
              DESCRIPTION="" # These simple events have no body
              case "$EVNAME" in
                create)
                  TITLE="[${REPO}] $(echo "$EVENT" | jq -r '.ref_type') created: $(echo "$EVENT" | jq -r '.ref')"
                  COLOR=3066993
                  ;;
                delete)
                  TITLE="[${REPO}] $(echo "$EVENT" | jq -r '.ref_type') deleted: $(echo "$EVENT" | jq -r '.ref')"
                  COLOR=15158332
                  ;;
                fork)
                  FORKER=$(echo "$EVENT" | jq -r '.forkee.owner.login')
                  TITLE="[${REPO}] Forked by ${FORKER}"
                  URL=$(echo "$EVENT" | jq -r '.forkee.html_url')
                  COLOR=8359053
                  ;;
                watch)
                  TITLE="⭐ [${REPO}] Starred"
                  URL="$URL_REPO/stargazers"
                  COLOR=16776960
                  ;;
              esac
              ;;

            *)
              TITLE="[${REPO}] Event: $EVNAME"
              DESCRIPTION="An unhandled event was triggered."
              URL="$URL_REPO"
              COLOR=9807270
              ;;
          esac

          # 本文が長すぎる場合は省略
          if [ $(printf "%s" "$DESCRIPTION" | wc -c) -gt 3500 ]; then
            DESCRIPTION=$(printf "%s" "$DESCRIPTION" | cut -c 1-3500)$(echo "...")
          fi

          FINAL_JSON=$(jq -cn \
            --arg username "GitHub" \
            --arg actor_name "$ACTOR" \
            --arg actor_url "https://github.com/$ACTOR" \
            --arg actor_icon_url "$(echo "$EVENT" | jq -r .sender.avatar_url)" \
            --arg title "$TITLE" \
            --arg description "$DESCRIPTION" \
            --arg url "$URL" \
            --argjson color "$COLOR" \
            --argjson fields "$FIELDS_JSON" \
            --arg repo_name "$REPO" \
            '{
              "username": $username,
              "embeds": [{
                "author": {
                  "name": $actor_name,
                  "url": $actor_url,
                  "icon_url": $actor_icon_url
                },
                "title": $title,
                "description": $description,
                "url": $url,
                "color": $color,
                "fields": $fields,
                "footer": { "text": $repo_name },
                "timestamp": now | todateiso8601
              }]
            }')
          echo "payload=$FINAL_JSON" >> $GITHUB_OUTPUT

      - name: Send to Discord
        env:
          PAYLOAD: ${{ steps.build.outputs.payload }}
        run: |
          curl -sS -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK" | cat