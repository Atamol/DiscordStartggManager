name: Notify Discord (repo activity)

on:
  push:
  pull_request:
    types: [opened, reopened, closed, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted, edited, dismissed]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, unassigned]
  issue_comment:
    types: [created]
  release:
    types: [published, created, prereleased, released, edited]
  discussion:
    types: [created, answered, locked, unlocked]
  discussion_comment:
    types: [created]
  create:  # branch/tag created
  delete:  # branch/tag deleted
  fork:
  watch:   # starred (type: started)

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      EVNAME: ${{ github.event_name }}
      REPO: ${{ github.repository }}
      ACTOR: ${{ github.actor }}
      REF: ${{ github.ref }}
      REFNAME: ${{ github.ref_name }}
      EVENT: ${{ toJson(github.event) }}
      SHA: ${{ github.sha }}
      URL_REPO: https://github.com/${{ github.repository }}
    steps:
      - name: "Guard: webhook secret must exist"
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "Missing secrets.DISCORD_WEBHOOK"; exit 1
          fi

      - name: Build message
        id: build
        run: |
          set -euo pipefail

          esc() { jq -Rsa . <<< "${1:-}"; }  # JSON escape helper

          case "$EVNAME" in

            push)
                          COMMIT_COUNT=$(echo "$EVENT" | jq '.commits | length')
                          COMPARE_URL=$(echo "$EVENT" | jq -r '.compare')

                          TITLE_LINE="### [${REPO}:${REFNAME}] ${COMMIT_COUNT} new commits](${COMPARE_URL})"

                          AUTHOR_LINE="_by ${ACTOR}_"

                          COMMIT_LIST=$(echo "$EVENT" | jq -r '.commits[]? | "- [`\(.id[0:7])`](\(.url))\n  \(.message|gsub("\r?\n";" "))"')
                          [ -z "$COMMIT_LIST" ] && COMMIT_LIST="No new commits."

                          DESCRIPTION=$(printf "%s\n%s\n\n%s" "$TITLE_LINE" "$AUTHOR_LINE" "$COMMIT_LIST")

                          TITLE=""
                          URL=""
                          FIELDS_JSON='[]'
                          COLOR=2829617
                          ;;
                                
            pull_request)
              ACTION=$(echo "$EVENT" | jq -r '.action')
              PRNUM=$(echo "$EVENT" | jq -r '.number')
              PRTITLE=$(echo "$EVENT" | jq -r '.pull_request.title')
              PRURL=$(echo "$EVENT" | jq -r '.pull_request.html_url')
              MERGED=$(echo "$EVENT" | jq -r '.pull_request.merged')
              BASE=$(echo "$EVENT" | jq -r '.pull_request.base.ref')
              HEAD=$(echo "$EVENT" | jq -r '.pull_request.head.ref')

              STATUS="Opened"
              COLOR=15105570 # orange
              if [ "$ACTION" = "closed" ] && [ "$MERGED" = "true" ]; then
                STATUS="Merged"
                COLOR=5763719 # blurple
              elif [ "$ACTION" = "closed" ]; then
                STATUS="Closed"
                COLOR=15158332 # red
              fi

              TITLE="PR #$PRNUM: $PRTITLE"
              URL="$PRURL"
              DESCRIPTION="Pull Request $ACTION by **$ACTOR**."
              FIELDS_JSON=$(jq -n \
                --arg head "$HEAD" --arg base "$BASE" --arg status "$STATUS" \
                '[{
                  "name": "From", "value": "`\($head)`", "inline": true
                }, {
                  "name": "To", "value": "`\($base)`", "inline": true
                }, {
                  "name": "Status", "value": $status, "inline": true
                }]')
              ;;

            issues)
              ACTION=$(echo "$EVENT" | jq -r '.action')
              NUM=$(echo "$EVENT" | jq -r '.issue.number')
              TITLE_ISS=$(echo "$EVENT" | jq -r '.issue.title')
              IURL=$(echo "$EVENT" | jq -r '.issue.html_url')
              ASSIGNEES=$(echo "$EVENT" | jq -r '.issue.assignees[]?.login // "None"' | paste -sd, -)
              LABELS=$(echo "$EVENT" | jq -r '.issue.labels[]?.name // "None"' | paste -sd, -)

              TITLE="Issue #$NUM: $TITLE_ISS"
              URL="$IURL"
              COLOR=15844367 # gold
              DESCRIPTION="Issue $ACTION by **$ACTOR**."
              FIELDS_JSON=$(jq -n \
                --arg assignees "$ASSIGNEES" --arg labels "$LABELS" \
                '[{
                  "name": "Assignees", "value": $assignees, "inline": true
                }, {
                  "name": "Labels", "value": $labels, "inline": true
                }]')
              ;;

            release)
              ACTION=$(echo "$EVENT" | jq -r '.action')
              TAG=$(echo "$EVENT" | jq -r '.release.tag_name')
              NAME=$(echo "$EVENT" | jq -r '.release.name')
              RURL=$(echo "$EVENT" | jq -r '.release.html_url')

              TITLE="Release $ACTION: $NAME"
              URL="$RURL"
              COLOR=3447003 # blue
              DESCRIPTION="A new release has been created by **$ACTOR**."
              FIELDS_JSON=$(jq -n \
                --arg tag "$TAG" \
                '[{
                  "name": "Tag", "value": "`\($tag)`", "inline": true
                }]')
              ;;
            
            issue_comment | pull_request_review_comment | discussion_comment)
              BODY=$(echo "$EVENT" | jq -r '.comment.body' | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\n/g')
              CURL=$(echo "$EVENT" | jq -r '.comment.html_url')
              CONTEXT_TITLE=""
              CONTEXT_URL=""
              if [ "$EVNAME" = "issue_comment" ]; then
                CONTEXT_TITLE="Issue #$(echo "$EVENT" | jq -r '.issue.number')"
                CONTEXT_URL=$(echo "$EVENT" | jq -r '.issue.html_url')
              elif [ "$EVNAME" = "pull_request_review_comment" ]; then
                CONTEXT_TITLE="PR #$(echo "$EVENT" | jq -r '.pull_request.number')"
                CONTEXT_URL=$(echo "$EVENT" | jq -r '.pull_request.html_url')
              else # discussion_comment
                CONTEXT_TITLE="Discussion: $(echo "$EVENT" | jq -r '.discussion.title')"
                CONTEXT_URL=$(echo "$EVENT" | jq -r '.discussion.html_url')
              fi
              
              TITLE="New Comment by $ACTOR"
              URL="$CURL"
              COLOR=10181046 # purple
              DESCRIPTION=$(printf "%s" "$BODY" | cut -c 1-1500)$(if [ $(printf "%s" "$BODY" | wc -c) -gt 1500 ]; then echo "..."; fi)
              FIELDS_JSON=$(jq -n \
                --arg ctx_title "$CONTEXT_TITLE" \
                --arg ctx_url "$CONTEXT_URL" \
                '[{ "name": "In Response To", "value": "[\($ctx_title)](\($ctx_url))" }]')
              ;;

            create)
              TITLE="Created $(echo "$EVENT" | jq -r '.ref_type'): $(echo "$EVENT" | jq -r '.ref')"
              DESCRIPTION="Created by **$ACTOR**."
              URL="$URL_REPO"
              COLOR=3066993 # green
              ;;
            delete)
              TITLE="Deleted $(echo "$EVENT" | jq -r '.ref_type'): $(echo "$EVENT" | jq -r '.ref')"
              DESCRIPTION="Deleted by **$ACTOR**."
              URL="$URL_REPO"
              COLOR=15158332 # red
              ;;
            fork)
              FORKER=$(echo "$EVENT" | jq -r '.forkee.owner.login')
              FURL=$(echo "$EVENT" | jq -r '.forkee.html_url')
              TITLE="Repository Forked"
              URL="$FURL"
              COLOR=8359053 # greyple
              DESCRIPTION="**$REPO** was forked by **[$FORKER]($FURL)**."
              ;;
            watch)
              TITLE="⭐ New Star!"
              URL="$URL_REPO/stargazers"
              COLOR=16776960 # yellow
              DESCRIPTION="**$ACTOR** starred **[$REPO]($URL_REPO)**."
              ;;

            *)
              TITLE="Event: $EVNAME"
              DESCRIPTION="An unhandled event was triggered by **$ACTOR**."
              URL="$URL_REPO"
              COLOR=9807270
              ;;
          esac

          FINAL_JSON=$(jq -cn \
            --arg username "GitHub" \
            --arg title "$TITLE" \
            --arg description "$DESCRIPTION" \
            --arg url "$URL" \
            --argjson color "$COLOR" \
            --argjson fields "$FIELDS_JSON" \
            --arg repo_name "$REPO" \
            '{
              "username": $username,
              "embeds": [{
                "title": $title,
                "description": $description,
                "url": $url,
                "color": $color,
                "fields": $fields,
                "footer": { "text": $repo_name },
                "timestamp": now | todateiso8601
              }]
            }')

          echo "payload=$FINAL_JSON" >> $GITHUB_OUTPUT

      - name: Send to Discord
        env:
          PAYLOAD: ${{ steps.build.outputs.payload }}
        run: |
          curl -sS -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK" | cat

